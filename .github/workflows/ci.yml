name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['3.1', '3.2', '3.3']
        rails-version: ['6.1', '7.0', '7.1']
        exclude:
          # Ruby 3.3 with Rails 6.1 has compatibility issues
          - ruby-version: '3.3'
            rails-version: '6.1'
    
    env:
      RAILS_VERSION: ${{ matrix.rails-version }}
      RUBY_VERSION: ${{ matrix.ruby-version }}
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
    
    - name: Set Rails version and Bundle install
      run: |
        cd vibe_errors
        # Remove Ruby version constraint for CI matrix testing
        sed -i '/^ruby /d' Gemfile
        bundle config set --local gemfile Gemfile
        if [ "$RAILS_VERSION" != "7.1" ]; then
          # Update Gemfile for different Rails versions
          sed -i "s/rails.*$/rails '~> $RAILS_VERSION.0'/" Gemfile
        fi
        bundle install --jobs 4 --retry 3
    
    - name: Set up database
      run: |
        cd vibe_errors/test/dummy
        bundle exec rails db:create
        bundle exec rails db:migrate
    
    - name: Run tests
      run: |
        cd vibe_errors
        bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/test-results/rspec.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ruby-${{ matrix.ruby-version }}-rails-${{ matrix.rails-version }}
        path: vibe_errors/tmp/test-results/
    
    - name: Upload coverage to CodeClimate
      if: matrix.ruby-version == '3.3' && matrix.rails-version == '7.1'
      uses: paambaati/codeclimate-action@v5.0.0
      with:
        coverageCommand: echo "Coverage already generated"
        coverageLocations: vibe_errors/coverage/lcov.info:lcov

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
    
    - name: Bundle install
      run: |
        cd vibe_errors
        # Remove Ruby version constraint for CI
        sed -i '/^ruby /d' Gemfile
        bundle install --jobs 4 --retry 3
    
    - name: Run StandardRB
      run: cd vibe_errors && bundle exec standardrb
    
    - name: Run RuboCop
      run: cd vibe_errors && bundle exec rubocop --format github
    
    - name: Run Reek
      run: cd vibe_errors && bundle exec reek --format json > tmp/reek-report.json || true
    
    - name: Run Brakeman
      run: cd vibe_errors && bundle exec brakeman --format json --output tmp/brakeman-report.json --quiet
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: vibe_errors/tmp/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
    
    - name: Bundle install
      run: |
        cd vibe_errors
        # Remove Ruby version constraint for CI
        sed -i '/^ruby /d' Gemfile
        bundle install --jobs 4 --retry 3
    
    - name: Run bundle audit
      run: |
        cd vibe_errors
        gem install bundler-audit
        bundle audit --update
    
    - name: Run Brakeman security scan
      run: cd vibe_errors && bundle exec brakeman --format sarif --output brakeman-report.sarif --quiet
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: vibe_errors/brakeman-report.sarif

  compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rails-version: ['4.2', '5.0', '5.1', '5.2', '6.0', '6.1', '7.0', '7.1']
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'  # Use Ruby 3.1 for broader compatibility
        bundler-cache: false
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
    
    - name: Test Rails ${{ matrix.rails-version }} compatibility
      run: |
        # Create a temporary Gemfile for compatibility testing
        cat > Gemfile.test << EOF
        source 'https://rubygems.org'
        gem 'rails', '~> ${{ matrix.rails-version }}.0'
        gem 'sqlite3', '~> 1.4'
        gem 'rspec-rails'
        EOF
        
        # Test if our engine loads without errors
        bundle install --gemfile=Gemfile.test
        bundle exec --gemfile=Gemfile.test ruby -e "
          require 'rails'
          require 'active_record'
          require 'action_controller'
          puts 'Rails ${{ matrix.rails-version }} compatibility: OK'
        "

  integration:
    runs-on: ubuntu-latest
    needs: [test, quality, security]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev
    
    - name: Bundle install vibe_errors engine
      run: |
        cd vibe_errors
        # Remove Ruby version constraint for CI
        sed -i '/^ruby /d' Gemfile
        bundle install --jobs 4 --retry 3
    
    - name: Test sample app integration
      run: |
        cd sample_app
        bundle install
        bundle exec rails db:create
        bundle exec rails db:migrate
        bundle exec rails generate vibe_errors:install
        bundle exec rails db:migrate
        
        # Start server in background
        bundle exec rails server -p 3000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test basic functionality
        curl -f http://localhost:3000/vibe_errors || exit 1
        curl -f http://localhost:3000/vibe_errors/api/errors || exit 1
        
        # Stop server
        kill $SERVER_PID
        
        echo "Integration test passed!"

  publish:
    runs-on: ubuntu-latest
    needs: [test, quality, security, compatibility, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Build gem
      run: |
        cd vibe_errors
        # Remove Ruby version constraint for CI
        sed -i '/^ruby /d' Gemfile
        bundle install
        gem build vibe_errors.gemspec
    
    - name: Upload gem artifact
      uses: actions/upload-artifact@v4
      with:
        name: vibe_errors-gem
        path: vibe_errors/vibe_errors-*.gem
    
    - name: Publish to RubyGems
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        cd vibe_errors
        mkdir -p ~/.gem
        echo ":rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}" > ~/.gem/credentials
        chmod 600 ~/.gem/credentials
        gem push vibe_errors-*.gem